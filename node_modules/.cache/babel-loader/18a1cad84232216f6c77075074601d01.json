{"ast":null,"code":"import Search from \"../components/Search.vue\";\nimport Articles from \"../components/Articles.vue\";\nimport axios from \"axios\";\nexport default {\n  name: \"HomePage\",\n  components: {\n    Search,\n    Articles\n  },\n  data() {\n    return {\n      articles: []\n    };\n  },\n  methods: {\n    async deleteArticle(id) {\n      if (confirm(\"Are you sure?\")) {\n        const res = await fetch(`api/articles/${id}`, {\n          method: \"DELETE\"\n        });\n        res.status === 200 ? this.articles = this.articles.filter(article => article.id !== id) : alert(\"Error Deleting Article\");\n      }\n    },\n    // async fetchArticles() {\n    //   const res = await fetch(\"api/articles\");\n    //   const data = await res.json();\n    //   return data;\n    // },\n    // async fetchArticle(id) {\n    //   const res = await fetch(`api/articless/${id}`);\n    //   const data = await res.json();\n    //   return data;\n    // },\n    async fetchArticles() {\n      try {\n        const url = `https://newsapi.org/v2/top-headlines?country=us&apiKey=c0316d3b021a4cc2b428f7d5d9d6e0f1`;\n        const response = await axios.get(url);\n        const articles = response.data.articles;\n        this.articles = articles.map(article => ({\n          title: article.title,\n          description: article.description\n        }));\n        const res = await fetch(\"api/articles\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(article)\n        });\n        const data = await res.json();\n        this.articles = [...this.articles, data];\n      } catch (err) {\n        if (err.response) {\n          // client received an error response (5xx, 4xx)\n          console.log(\"Server Error:\", err);\n        } else if (err.request) {\n          // client never received a response, or request never left\n          console.log(\"Network Error:\", err);\n        } else {\n          console.log(\"Client Error:\", err);\n        }\n      }\n    }\n  },\n  mounted() {\n    this.fetchArticles();\n  }\n};","map":{"version":3,"mappings":"AAMA,OAAOA,MAAK,MAAO,0BAA0B;AAC7C,OAAOC,QAAO,MAAO,4BAA4B;AACjD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVJ,MAAM;IACNC;EACF,CAAC;EACDI,IAAI,GAAG;IACL,OAAO;MAAEC,QAAQ,EAAE;IAAG,CAAC;EACzB,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMC,aAAa,CAACC,EAAE,EAAE;MACtB,IAAIC,OAAO,CAAC,eAAe,CAAC,EAAE;QAC5B,MAAMC,GAAE,GAAI,MAAMC,KAAK,CAAE,gBAAeH,EAAG,EAAC,EAAE;UAC5CI,MAAM,EAAE;QACV,CAAC,CAAC;QAEFF,GAAG,CAACG,MAAK,KAAM,GAAE,GACZ,IAAI,CAACR,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACS,MAAM,CAClCC,OAAO,IAAKA,OAAO,CAACP,EAAC,KAAMA,EAAC,CAC9B,GACDQ,KAAK,CAAC,wBAAwB,CAAC;MACrC;IACF,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,aAAa,GAAG;MACpB,IAAI;QACF,MAAMC,GAAE,GAAK,yFAAwF;QACrG,MAAMC,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAACF,GAAG,CAAC;QACrC,MAAMb,QAAO,GAAIc,QAAQ,CAACf,IAAI,CAACC,QAAQ;QACvC,IAAI,CAACA,QAAO,GAAIA,QAAQ,CAACgB,GAAG,CAAEN,OAAO,KAAM;UACzCO,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,WAAW,EAAER,OAAO,CAACQ;QACvB,CAAC,CAAC,CAAC;QAEH,MAAMb,GAAE,GAAI,MAAMC,KAAK,CAAC,cAAc,EAAE;UACtCC,MAAM,EAAE,MAAM;UACdY,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,OAAO;QAC9B,CAAC,CAAC;QAEF,MAAMX,IAAG,GAAI,MAAMM,GAAG,CAACkB,IAAI,EAAE;QAE7B,IAAI,CAACvB,QAAO,GAAI,CAAC,GAAG,IAAI,CAACA,QAAQ,EAAED,IAAI,CAAC;MAC1C,EAAE,OAAOyB,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACV,QAAQ,EAAE;UAChB;UACAW,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,GAAG,CAAC;QACnC,OAAO,IAAIA,GAAG,CAACG,OAAO,EAAE;UACtB;UACAF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,GAAG,CAAC;QACpC,OAAO;UACLC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,GAAG,CAAC;QACnC;MACF;IACF;EACF,CAAC;EACDI,OAAO,GAAG;IACR,IAAI,CAAChB,aAAa,EAAE;EACtB;AACF,CAAC","names":["Search","Articles","axios","name","components","data","articles","methods","deleteArticle","id","confirm","res","fetch","method","status","filter","article","alert","fetchArticles","url","response","get","map","title","description","headers","body","JSON","stringify","json","err","console","log","request","mounted"],"sourceRoot":"","sources":["/Users/Nicole/CODE/fomatic/nicole-onboarding-2/news-project/src/views/HomePage.vue"],"sourcesContent":["<template>\n  <Search />\n  <Articles @delete-article=\"deleteArticle\" :articles=\"articles\" />\n</template>\n\n<script>\nimport Search from \"../components/Search.vue\";\nimport Articles from \"../components/Articles.vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"HomePage\",\n  components: {\n    Search,\n    Articles,\n  },\n  data() {\n    return { articles: [] };\n  },\n\n  methods: {\n    async deleteArticle(id) {\n      if (confirm(\"Are you sure?\")) {\n        const res = await fetch(`api/articles/${id}`, {\n          method: \"DELETE\",\n        });\n\n        res.status === 200\n          ? (this.articles = this.articles.filter(\n              (article) => article.id !== id\n            ))\n          : alert(\"Error Deleting Article\");\n      }\n    },\n    // async fetchArticles() {\n    //   const res = await fetch(\"api/articles\");\n    //   const data = await res.json();\n    //   return data;\n    // },\n    // async fetchArticle(id) {\n    //   const res = await fetch(`api/articless/${id}`);\n    //   const data = await res.json();\n    //   return data;\n    // },\n    async fetchArticles() {\n      try {\n        const url = `https://newsapi.org/v2/top-headlines?country=us&apiKey=c0316d3b021a4cc2b428f7d5d9d6e0f1`;\n        const response = await axios.get(url);\n        const articles = response.data.articles;\n        this.articles = articles.map((article) => ({\n          title: article.title,\n          description: article.description,\n        }));\n\n        const res = await fetch(\"api/articles\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\",\n          },\n          body: JSON.stringify(article),\n        });\n\n        const data = await res.json();\n\n        this.articles = [...this.articles, data];\n      } catch (err) {\n        if (err.response) {\n          // client received an error response (5xx, 4xx)\n          console.log(\"Server Error:\", err);\n        } else if (err.request) {\n          // client never received a response, or request never left\n          console.log(\"Network Error:\", err);\n        } else {\n          console.log(\"Client Error:\", err);\n        }\n      }\n    },\n  },\n  mounted() {\n    this.fetchArticles();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}